import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as i,d as e,a as t,o as s}from"./app-BI3Vj0eY.js";const n={},r=e("blockquote",null,[e("p",null,"来自 gpt 的摘要： 缓存雪崩是指大量缓存数据在同一时间失效，导致大量请求直接打到数据库，造成数据库压力骤增，甚至宕机。解决方案包括：通过Redis集群避免单点故障，设置多级缓存和缓存降级，给缓存设置随机过期时间和缓存预热等。缓存穿透是指请求的数据在缓存和数据库中都不存在，所有请求直接打到数据库。常用应对方法有：参数校验、缓存无效key、使用布隆过滤器、以及接口限流。缓存击穿是指高并发请求集中访问某个热点数据，而该数据在缓存中失效，导致大量请求同时打到数据库。解决办法包括设置热点数据永不过期、缓存预热和使用互斥锁防止并发读写数据库。复杂场景如Redis集群和缓存降级涉及更多细节，布隆过滤器则能有效防止大量无效请求。")],-1),h=t('<h2 id="一、缓存雪崩" tabindex="-1"><a class="header-anchor" href="#一、缓存雪崩"><span>一、缓存雪崩</span></a></h2><h3 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h3><p>缓存雪崩这个场景比较少见，但一出现就是比较致命的问题，可以理解为：「同一时间」缓存中的「大面积数据失效」，导致「大量请求」直接打在数据库，对数据库 CPU 和内存造成巨大压力，严重的会造成数据库宕机。一般导致缓存雪崩现象有两个原因：「（1）缓存服务宕机（2）缓存数据大面积同时过期。」</p><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h3><h4 id="针对缓存服务不可用" tabindex="-1"><a class="header-anchor" href="#针对缓存服务不可用"><span>针对缓存服务不可用</span></a></h4><ul><li><ol><li>增强服务可用性 -&gt;「Redis 集群」：通过 Redis 集群避免单机服务失效。</li></ol></li><li><ol start="2"><li>预防服务不可用 -&gt;「缓存降级」：当遇见即将到来的数据压力时，通过缓存降级，例如返回默认值，设置多级缓存等。防止 Redis 服务故障，从用户的角度来讲其实也就多刷新几次的事情，这样也是可以保证服务还是可用的，只是体验不太好。</li></ol></li><li><ol start="3"><li>服务不可用的兜底 -&gt; 多级缓存：设置多级缓存，例如本地缓存 + Redis 缓存的二级缓存组合，当 Redis 缓存出现问题时，还可以从本地缓存中获取到部分数据。</li></ol></li></ul><h4 id="针对缓存数据大面积同时过期" tabindex="-1"><a class="header-anchor" href="#针对缓存数据大面积同时过期"><span>针对缓存数据大面积同时过期</span></a></h4><ul><li><ol><li>解决「同一时间」的问题 -&gt; 设置随机失效时间：为缓存设置随机的失效时间，例如在固定过期时间的基础上加上一个随机值，这样可以避免大量缓存同时到期，从而减少缓存雪崩的风险。</li></ol></li><li><ol start="2"><li>解决「大面积数据失效」的问题 -&gt; 持久缓存策略（看情况）：虽然一般不推荐设置缓存永不过期，但对于某些关键性和变化不频繁的数据，可以考虑这种策略。</li></ol></li><li><ol start="3"><li>解决「大面积数据失效」的问题 -&gt;「缓存预热」：针对热点数据提前预热，将其存入缓存中并设置合理的过期时间，比如秒杀场景下的数据在秒杀结束之前不过期。</li></ol></li><li><ol start="4"><li>解决「大量请求」的问题 -&gt; 对数据库操作加互斥锁或队列：保证不会有大量线程对数据库同时进行读写，避免数据库受到巨大压力。</li></ol></li></ul><h2 id="二、缓存穿透" tabindex="-1"><a class="header-anchor" href="#二、缓存穿透"><span>二、缓存穿透</span></a></h2><h3 id="场景-1" tabindex="-1"><a class="header-anchor" href="#场景-1"><span>场景</span></a></h3><p>缓存穿透可以理解为：「大量不存在」于数据库和缓存的 key 请求，导致这些大量请求都直接打到了数据库上，并「没有经过缓存」，对数据库 CPU 和内存造成巨大压力，严重的会造成数据库宕机。这种场景常见于「黑客恶意攻击」和「业务操作问题」导致的。</p><h3 id="解决方案-1" tabindex="-1"><a class="header-anchor" href="#解决方案-1"><span>解决方案</span></a></h3><ul><li><ol><li>在接口之前阻挡 -&gt;「接口限流」：根据用户或者 IP 对接口进行限流，对于异常频繁的访问行为，还可以采取黑名单机制，例如将异常 IP 列入黑名单。（缓存击穿和雪崩都可以配合接口限流来解决）</li></ol></li><li><ol start="2"><li>在缓存之前阻挡 -&gt; 参数校验：做好后端服务的参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。</li></ol></li><li><ol start="3"><li>在数据库之前阻挡 -&gt;「布隆过滤器」（推荐）：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会继续流程。</li></ol></li><li><ol start="4"><li>防止再穿透 -&gt; 缓存无效 key（对黑客攻击效果较差）：如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点，比如 1 分钟。</li></ol></li></ul><h2 id="三、缓存击穿" tabindex="-1"><a class="header-anchor" href="#三、缓存击穿"><span>三、缓存击穿</span></a></h2><h3 id="场景-2" tabindex="-1"><a class="header-anchor" href="#场景-2"><span>场景</span></a></h3><p>缓存击穿可以理解为：正在接受「大量请求」的一个热点数据刚好在缓存「失效」，导致这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库 CPU 和内存造成巨大压力，严重的会造成数据库宕机。一般这种情况的原因是「热点数据过期」。</p><h3 id="解决方案-2" tabindex="-1"><a class="header-anchor" href="#解决方案-2"><span>解决方案</span></a></h3><ul><li><ol><li>解决「大量请求」问题 -&gt; 对数据库操作加互斥锁或队列：保证不会有大量线程对数据库同时进行读写，避免数据库受到巨大压力。</li></ol></li><li><ol start="2"><li>解决「失效」问题 -&gt; 永不过期（不推荐）：设置热点数据永不过期或者过期时间比较长。</li></ol></li><li><ol start="3"><li>解决「失效」问题 -&gt;「缓存预热」：针对热点数据提前预热，将其存入缓存中并设置合理的过期时间，比如秒杀场景下的数据在秒杀结束之前不过期。</li></ol></li></ul><h2 id="四、复杂方案的具体实现" tabindex="-1"><a class="header-anchor" href="#四、复杂方案的具体实现"><span>四、复杂方案的具体实现</span></a></h2><h3 id="redis-集群" tabindex="-1"><a class="header-anchor" href="#redis-集群"><span>Redis 集群</span></a></h3><p>方案较复杂，后期更新。</p><h3 id="缓存降级" tabindex="-1"><a class="header-anchor" href="#缓存降级"><span>缓存降级</span></a></h3><p>当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。降级的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。</p><p>可以参考日志级别设置预案：（1）一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；（2）警告：有些服务在一段时间内成功率有波动（如在 95~100%之间），可以自动降级或人工降级，并发送告警；（3）错误：比如可用率低于 90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；（4）严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。</p><p>服务降级的目的，是为了防止 Redis 服务故障，导致数据库跟着一起发生雪崩问题。因此，对于不重要的缓存数据，可以采取服务降级策略，例如一个比较常见的做法就是，Redis 出现问题，不去数据库查询，而是直接返回默认值给用户。</p><h3 id="缓存预热" tabindex="-1"><a class="header-anchor" href="#缓存预热"><span>缓存预热</span></a></h3><ul><li><ol><li>使用「定时任务」，比如 xxl-job，来定时触发缓存预热的逻辑，将数据库中的热点数据查询出来并存入缓存中。</li></ol></li><li><ol start="2"><li>使用「消息队列」，比如 Kafka，来异步地进行缓存预热，将数据库中的热点数据的主键或者 ID 发送到消息队列中，然后由缓存服务消费消息队列中的数据，根据主键或者 ID 查询数据库并更新缓存。</li></ol></li></ul><h3 id="布隆过滤器" tabindex="-1"><a class="header-anchor" href="#布隆过滤器"><span>布隆过滤器</span></a></h3><h4 id="了解过布隆过滤器吗" tabindex="-1"><a class="header-anchor" href="#了解过布隆过滤器吗"><span>了解过布隆过滤器吗?</span></a></h4><p>布隆过滤器它的数据结构其实是位图，我们会对要放入的数据进行多次 hash，然后放到对应的位上并设置为 1，后面的数据要判断是否存在的时候，只需要进行多次 hash，如果对应的位均为 1 的时候数据可能是存在的，如果不都为 1 那代表数据「一定不存在」。虽然会误判，但不会漏判，可以有效地过滤大量无效请求。</p><h4 id="布隆过滤器如何使用" tabindex="-1"><a class="header-anchor" href="#布隆过滤器如何使用"><span>布隆过滤器如何使用？</span></a></h4><p>把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。</p><h4 id="布隆过滤器有没有什么缺点" tabindex="-1"><a class="header-anchor" href="#布隆过滤器有没有什么缺点"><span>布隆过滤器有没有什么缺点?</span></a></h4><p>它占用空间更少并且效率更高，但是缺点是其返回的结果是「概率性」的，而不是非常准确的。理论情况下添加到集合中的「元素越多，误报的可能性就越大」。并且，存放在布隆过滤器的数据「不容易删除」。</p><h4 id="布隆过滤器误判会对业务造成什么影响" tabindex="-1"><a class="header-anchor" href="#布隆过滤器误判会对业务造成什么影响"><span>布隆过滤器误判会对业务造成什么影响?</span></a></h4><p>布隆过滤器的「误判」是指它可能会「判断某个实际不存在的元素为存在」。具体到业务中，布隆过滤器的误判可能会带来的影响包括：</p><ul><li><p>误缓存空值：布隆过滤器可能会认为某些不存在的数据存在于系统中，从而避免了对数据库的查询，但实际上这部分数据并不存在。因此，系统可能会缓存空值或默认值，而不是从数据库获取真实数据。虽然这不会对数据库产生额外压力，但可能会导致用户看到错误或不完整的数据。</p></li><li><p>影响用户体验：当布隆过滤器误判时，系统可能返回不正确的数据或不进行应有的查询操作，导致用户看到不符合预期的结果，从而影响用户体验。</p></li></ul><ul><li>业务逻辑异常：在某些场景中，业务逻辑可能会依赖于查询结果的准确性，如果布隆过滤器误判，导致系统未能查询到正确的数据，可能会触发错误的业务逻辑或决策。</li></ul><p>不过，布隆过滤器「不会出现漏判」，也就是说它不会错过那些实际存在的元素。因此，误判带来的影响虽然存在，但相对于防止缓存穿透的好处，布隆过滤器依然是一个非常有效的解决方案。</p><h3 id="服务限流" tabindex="-1"><a class="header-anchor" href="#服务限流"><span>服务限流</span></a></h3><p><a href="https://javaguide.cn/high-availability/limit-request.html" target="_blank" rel="noopener noreferrer">服务限流详解</a></p><h2 id="五、相关问题" tabindex="-1"><a class="header-anchor" href="#五、相关问题"><span>五、相关问题</span></a></h2><h3 id="缓存雪崩和缓存击穿有什么区别" tabindex="-1"><a class="header-anchor" href="#缓存雪崩和缓存击穿有什么区别"><span>缓存雪崩和缓存击穿有什么区别？</span></a></h3><p>缓存雪崩和缓存击穿比较像，但导致缓存雪崩的原因是缓存中的大量数据失效，缓存击穿导致的原因主要是某个热点数据不存在与缓存中（通常是因为缓存中的那份数据已经过期）。</p><h3 id="怎么保证多级缓存和-redis-缓存双写的数据一致性" tabindex="-1"><a class="header-anchor" href="#怎么保证多级缓存和-redis-缓存双写的数据一致性"><span>怎么保证多级缓存和 redis 缓存双写的数据一致性？</span></a></h3><p>其实类似数据库和 redis 一样，都是先更新数据库在删除缓存，这里我们把缓存看成本地缓存，数据库看成 redis 就行了。可能会出现数据不一致的问题，但这种情况比较极端，我们可以把二级缓存的过期时间设计小一点。</p><h3 id="多级缓存在多节点怎么保证数据的一致性" tabindex="-1"><a class="header-anchor" href="#多级缓存在多节点怎么保证数据的一致性"><span>多级缓存在多节点怎么保证数据的一致性？</span></a></h3><ul><li><p>这个感觉不太现实，既然使用了二级缓存你就要去容忍它不能保证一致性的缺点，所以基于这点思考我们要让二级缓存过期时间尽可能短。还是有方案来保证数据的一致性，就在对某个二级缓存更新后，通知其他节点，但是这会造成很没必要的资源损耗，我认为是不考虑的，我们可以选择容忍。</p></li><li><p>参考：在多节点的多级缓存架构中，缓存一致性是一个复杂但重要的问题。常见的几种解决方案和策略包括：</p></li></ul><ol><li><p><strong>缓存失效策略</strong>：简单直接，但在高并发和频繁写入的场景下有性能问题。</p></li><li><p><strong>发布/订阅更新通知</strong>：能够快速传播缓存更新，减少不一致的窗口时间。</p></li><li><p><strong>使用分布式缓存</strong>：如 Redis 集群，可以天然解决一致性问题，但需要更复杂的管理和配置。</p></li><li><p><strong>一致性哈希算法</strong>：适用于大型分布式系统，能有效减少不一致性，但实现复杂。</p></li><li><p><strong>分布式锁机制</strong>：保证强一致性，但性能会有所下降，适用于高一致性需求场景。</p></li><li><p><strong>双写检测与补偿机制</strong>：在不一致发生时触发补偿，适合高可用系统。</p></li></ol><p>具体选择哪种策略要根据系统的性能需求、业务场景的并发情况以及对数据一致性的要求来决定。</p>',50);function d(o,p){return s(),a("div",null,[r,i("more"),h])}const u=l(n,[["render",d],["__file","缓存三兄弟及相关解决方案.html.vue"]]),f=JSON.parse(`{"path":"/%E6%96%87%E7%AB%A0/%E6%8A%80%E6%9C%AF/%E7%BC%93%E5%AD%98%E4%B8%89%E5%85%84%E5%BC%9F%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html","title":"「缓存三兄弟及解决相关方案」","lang":"zh-CN","frontmatter":{"title":"「缓存三兄弟及解决相关方案」","author":"Jogs","date":"2024-09-13T00:00:00.000Z","category":["技术"],"tag":["Redis"],"editLink":false,"description":"来自 gpt 的摘要： 缓存雪崩是指大量缓存数据在同一时间失效，导致大量请求直接打到数据库，造成数据库压力骤增，甚至宕机。解决方案包括：通过Redis集群避免单点故障，设置多级缓存和缓存降级，给缓存设置随机过期时间和缓存预热等。缓存穿透是指请求的数据在缓存和数据库中都不存在，所有请求直接打到数据库。常用应对方法有：参数校验、缓存无效key、使用布隆过滤...","head":[["meta",{"property":"og:url","content":"https://jogs-abc.github.io/%E6%96%87%E7%AB%A0/%E6%8A%80%E6%9C%AF/%E7%BC%93%E5%AD%98%E4%B8%89%E5%85%84%E5%BC%9F%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"}],["meta",{"property":"og:site_name","content":"Jogs' blog"}],["meta",{"property":"og:title","content":"「缓存三兄弟及解决相关方案」"}],["meta",{"property":"og:description","content":"来自 gpt 的摘要： 缓存雪崩是指大量缓存数据在同一时间失效，导致大量请求直接打到数据库，造成数据库压力骤增，甚至宕机。解决方案包括：通过Redis集群避免单点故障，设置多级缓存和缓存降级，给缓存设置随机过期时间和缓存预热等。缓存穿透是指请求的数据在缓存和数据库中都不存在，所有请求直接打到数据库。常用应对方法有：参数校验、缓存无效key、使用布隆过滤..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Jogs"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:published_time","content":"2024-09-13T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"「缓存三兄弟及解决相关方案」\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-13T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jogs\\"}]}"]]},"headers":[{"level":2,"title":"一、缓存雪崩","slug":"一、缓存雪崩","link":"#一、缓存雪崩","children":[{"level":3,"title":"场景","slug":"场景","link":"#场景","children":[]},{"level":3,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]}]},{"level":2,"title":"二、缓存穿透","slug":"二、缓存穿透","link":"#二、缓存穿透","children":[{"level":3,"title":"场景","slug":"场景-1","link":"#场景-1","children":[]},{"level":3,"title":"解决方案","slug":"解决方案-1","link":"#解决方案-1","children":[]}]},{"level":2,"title":"三、缓存击穿","slug":"三、缓存击穿","link":"#三、缓存击穿","children":[{"level":3,"title":"场景","slug":"场景-2","link":"#场景-2","children":[]},{"level":3,"title":"解决方案","slug":"解决方案-2","link":"#解决方案-2","children":[]}]},{"level":2,"title":"四、复杂方案的具体实现","slug":"四、复杂方案的具体实现","link":"#四、复杂方案的具体实现","children":[{"level":3,"title":"Redis 集群","slug":"redis-集群","link":"#redis-集群","children":[]},{"level":3,"title":"缓存降级","slug":"缓存降级","link":"#缓存降级","children":[]},{"level":3,"title":"缓存预热","slug":"缓存预热","link":"#缓存预热","children":[]},{"level":3,"title":"布隆过滤器","slug":"布隆过滤器","link":"#布隆过滤器","children":[]},{"level":3,"title":"服务限流","slug":"服务限流","link":"#服务限流","children":[]}]},{"level":2,"title":"五、相关问题","slug":"五、相关问题","link":"#五、相关问题","children":[{"level":3,"title":"缓存雪崩和缓存击穿有什么区别？","slug":"缓存雪崩和缓存击穿有什么区别","link":"#缓存雪崩和缓存击穿有什么区别","children":[]},{"level":3,"title":"怎么保证多级缓存和 redis 缓存双写的数据一致性？","slug":"怎么保证多级缓存和-redis-缓存双写的数据一致性","link":"#怎么保证多级缓存和-redis-缓存双写的数据一致性","children":[]},{"level":3,"title":"多级缓存在多节点怎么保证数据的一致性？","slug":"多级缓存在多节点怎么保证数据的一致性","link":"#多级缓存在多节点怎么保证数据的一致性","children":[]}]}],"git":{},"readingTime":{"minutes":11.74,"words":3522},"filePathRelative":"文章/技术/缓存三兄弟及相关解决方案.md","localizedDate":"2024年9月13日","excerpt":"<blockquote>\\n<p>来自 gpt 的摘要：\\n缓存雪崩是指大量缓存数据在同一时间失效，导致大量请求直接打到数据库，造成数据库压力骤增，甚至宕机。解决方案包括：通过Redis集群避免单点故障，设置多级缓存和缓存降级，给缓存设置随机过期时间和缓存预热等。缓存穿透是指请求的数据在缓存和数据库中都不存在，所有请求直接打到数据库。常用应对方法有：参数校验、缓存无效key、使用布隆过滤器、以及接口限流。缓存击穿是指高并发请求集中访问某个热点数据，而该数据在缓存中失效，导致大量请求同时打到数据库。解决办法包括设置热点数据永不过期、缓存预热和使用互斥锁防止并发读写数据库。复杂场景如Redis集群和缓存降级涉及更多细节，布隆过滤器则能有效防止大量无效请求。</p>\\n</blockquote>","autoDesc":true}`);export{u as comp,f as data};
