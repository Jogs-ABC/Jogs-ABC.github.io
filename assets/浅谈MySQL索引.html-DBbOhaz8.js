import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as a,d as e,a as t,o as p}from"./app-BQvkpm6l.js";const n={},s=e("blockquote",null,[e("p",null,"来自 gpt 的摘要： 本文详细介绍了 MySQL 中索引的概念、分类、使用场景及优缺点。索引是一种用于加速数据查询的数据结构，MySQL 中常用的索引类型包括 B+树、哈希索引、聚簇索引、非聚簇索引等。索引可以分为主键索引、普通索引、唯一索引等，主要用于提高查询速度，尤其适用于频繁查询、排序和连接操作的字段。虽然索引能够显著提升查询性能，但在数据修改时会增加开销，并占用物理存储空间。此外，索引在某些情况下会失效，比如使用不当的查询条件或不遵循最左前缀原则。因此，合理使用索引可以优化数据库的性能，但过度依赖索引可能带来负面影响。")],-1),r=t('<h2 id="讲一下-mysql-的索引" tabindex="-1"><a class="header-anchor" href="#讲一下-mysql-的索引"><span>讲一下 MySQL 的索引？</span></a></h2><ul><li><p>索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。</p></li><li><p>索引往往是存储在磁盘上的文件中的，占用空间大。</p></li><li><p>索引底层数据结构存在很多种类型，常见的索引结构有: B 树， B+树 和 Hash、红黑树。在 MySQL 中，无论是 Innodb 还是 MyIsam，都使用了 B+树作为索引结构。</p></li></ul><h2 id="索引的分类" tabindex="-1"><a class="header-anchor" href="#索引的分类"><span>索引的分类？</span></a></h2><h3 id="按照数据结构维度划分" tabindex="-1"><a class="header-anchor" href="#按照数据结构维度划分"><span>按照数据结构维度划分 ：</span></a></h3><ul><li><p>BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。</p></li><li><p>哈希索引：类似键值对的形式，一次即可定位。</p></li><li><p>RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</p></li><li><p>全文索引：对文本的内容进行分词，进行搜索。目前只有 <code>CHAR</code>、<code>VARCHAR</code> ，<code>TEXT</code> 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</p></li></ul><h3 id="按照底层存储方式角度划分" tabindex="-1"><a class="header-anchor" href="#按照底层存储方式角度划分"><span>按照底层存储方式角度划分 ：</span></a></h3><ul><li><p>聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。</p></li><li><p>非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。</p></li></ul><h3 id="按照应用维度划分" tabindex="-1"><a class="header-anchor" href="#按照应用维度划分"><span>按照应用维度划分 ：</span></a></h3><ul><li><p>主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。</p></li><li><p>普通索引：仅加速查询。</p></li><li><p>唯一索引：加速查询 + 列值唯一（可以有 NULL）。</p></li><li><p>覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。</p></li><li><p>联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。</p></li><li><p>全文索引：对文本的内容进行分词，进行搜索。目前只有 <code>CHAR</code>、<code>VARCHAR</code> ，<code>TEXT</code> 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</p></li></ul><h3 id="mysql-8-x-中实现的索引新特性" tabindex="-1"><a class="header-anchor" href="#mysql-8-x-中实现的索引新特性"><span>MySQL 8.x 中实现的索引新特性：</span></a></h3><ul><li><p>隐藏索引：也称为不可见索引，不会被优化器使用，但是仍然需要维护，通常会软删除和灰度发布的场景中使用。主键不能设置为隐藏（包括显式设置或隐式设置）。</p></li><li><p>降序索引：之前的版本就支持通过 desc 来指定索引为降序，但实际上创建的仍然是常规的升序索引。直到 MySQL 8.x 版本才开始真正支持降序索引。另外，在 MySQL 8.x 版本中，不再对 GROUP BY 语句进行隐式排序。</p></li><li><p>函数索引：从 MySQL 8.0.13 版本开始支持在索引中使用函数或者表达式的值，也就是在索引中可以包含函数或者表达式。</p></li></ul><h2 id="索引的使用场景是什么" tabindex="-1"><a class="header-anchor" href="#索引的使用场景是什么"><span>索引的使用场景是什么？</span></a></h2><ul><li><p>不为 NULL 的字段：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0，1，true，false 这样语义较为清晰的短值或短字符作为替代。</p></li><li><p>被频繁查询的字段：我们创建索引的字段应该是查询操作非常频繁的字段。</p></li><li><p>被作为条件查询的字段：被作为 WHERE 条件查询的字段，应该被考虑建立索引。</p></li><li><p>频繁需要排序的字段：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。</p></li><li><p>被经常频繁用于连接的字段：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。</p></li></ul><h2 id="索引的优缺点" tabindex="-1"><a class="header-anchor" href="#索引的优缺点"><span>索引的优缺点？</span></a></h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点 ：</span></a></h3><ul><li><p>使用索引可以大大加快数据的检索速度（大大减少检索的数据量）, 减少 IO 次数，这也是创建索引的最主要的原因。</p></li><li><p>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</p></li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点 ：</span></a></h3><ul><li><p>创建索引和维护索引需要耗费许多时间。当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低 SQL 执行效率。</p></li><li><p>索引需要使用物理文件存储，也会耗费一定空间。</p></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h3><p>大多数情况下，索引查询都是比全表扫描要快的。但是如果数据库的数据量不大，那么使用索引也不一定能够带来很大提升。</p><h2 id="mysql-索引失效的情况" tabindex="-1"><a class="header-anchor" href="#mysql-索引失效的情况"><span>MySQL 索引失效的情况？</span></a></h2><ul><li><p>WHERE 子句中使用 !=，&lt;&gt;， or，表达式操作，函数操作， = 左边进行运算。</p></li><li><p>联合索引不遵循最左前缀原则。</p></li><li><p>MySQL 系统评估索引比全表扫描更慢。</p></li><li><p>字段为字符串且查询时不带引号。</p></li><li><p>LIKE 查询，% 在前。</p></li><li><p>字段为 NULL。</p></li><li><p>IN 的取值范围较大。</p></li></ul>',22);function o(c,h){return p(),i("div",null,[s,a("more"),r])}const u=l(n,[["render",o],["__file","浅谈MySQL索引.html.vue"]]),L=JSON.parse(`{"path":"/%E6%96%87%E7%AB%A0/%E6%8A%80%E6%9C%AF%E6%95%B4%E7%90%86/%E6%B5%85%E8%B0%88MySQL%E7%B4%A2%E5%BC%95.html","title":"「浅谈MySQL索引」","lang":"zh-CN","frontmatter":{"title":"「浅谈MySQL索引」","author":"Jogs","date":"2024-09-14T00:00:00.000Z","category":["技术"],"tag":["MySQL"],"editLink":false,"description":"来自 gpt 的摘要： 本文详细介绍了 MySQL 中索引的概念、分类、使用场景及优缺点。索引是一种用于加速数据查询的数据结构，MySQL 中常用的索引类型包括 B+树、哈希索引、聚簇索引、非聚簇索引等。索引可以分为主键索引、普通索引、唯一索引等，主要用于提高查询速度，尤其适用于频繁查询、排序和连接操作的字段。虽然索引能够显著提升查询性能，但在数据修改...","head":[["meta",{"property":"og:url","content":"https://jogs-abc.github.io/%E6%96%87%E7%AB%A0/%E6%8A%80%E6%9C%AF%E6%95%B4%E7%90%86/%E6%B5%85%E8%B0%88MySQL%E7%B4%A2%E5%BC%95.html"}],["meta",{"property":"og:site_name","content":"Jogs' blog"}],["meta",{"property":"og:title","content":"「浅谈MySQL索引」"}],["meta",{"property":"og:description","content":"来自 gpt 的摘要： 本文详细介绍了 MySQL 中索引的概念、分类、使用场景及优缺点。索引是一种用于加速数据查询的数据结构，MySQL 中常用的索引类型包括 B+树、哈希索引、聚簇索引、非聚簇索引等。索引可以分为主键索引、普通索引、唯一索引等，主要用于提高查询速度，尤其适用于频繁查询、排序和连接操作的字段。虽然索引能够显著提升查询性能，但在数据修改..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Jogs"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2024-09-14T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"「浅谈MySQL索引」\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jogs\\"}]}"]]},"headers":[{"level":2,"title":"讲一下 MySQL 的索引？","slug":"讲一下-mysql-的索引","link":"#讲一下-mysql-的索引","children":[]},{"level":2,"title":"索引的分类？","slug":"索引的分类","link":"#索引的分类","children":[{"level":3,"title":"按照数据结构维度划分 ：","slug":"按照数据结构维度划分","link":"#按照数据结构维度划分","children":[]},{"level":3,"title":"按照底层存储方式角度划分 ：","slug":"按照底层存储方式角度划分","link":"#按照底层存储方式角度划分","children":[]},{"level":3,"title":"按照应用维度划分 ：","slug":"按照应用维度划分","link":"#按照应用维度划分","children":[]},{"level":3,"title":"MySQL 8.x 中实现的索引新特性：","slug":"mysql-8-x-中实现的索引新特性","link":"#mysql-8-x-中实现的索引新特性","children":[]}]},{"level":2,"title":"索引的使用场景是什么？","slug":"索引的使用场景是什么","link":"#索引的使用场景是什么","children":[]},{"level":2,"title":"索引的优缺点？","slug":"索引的优缺点","link":"#索引的优缺点","children":[{"level":3,"title":"优点 ：","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点 ：","slug":"缺点","link":"#缺点","children":[]},{"level":3,"title":"总结：","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"MySQL 索引失效的情况？","slug":"mysql-索引失效的情况","link":"#mysql-索引失效的情况","children":[]}],"git":{},"readingTime":{"minutes":5.43,"words":1629},"filePathRelative":"文章/技术整理/浅谈MySQL索引.md","localizedDate":"2024年9月14日","excerpt":"<blockquote>\\n<p>来自 gpt 的摘要：\\n本文详细介绍了 MySQL 中索引的概念、分类、使用场景及优缺点。索引是一种用于加速数据查询的数据结构，MySQL 中常用的索引类型包括 B+树、哈希索引、聚簇索引、非聚簇索引等。索引可以分为主键索引、普通索引、唯一索引等，主要用于提高查询速度，尤其适用于频繁查询、排序和连接操作的字段。虽然索引能够显著提升查询性能，但在数据修改时会增加开销，并占用物理存储空间。此外，索引在某些情况下会失效，比如使用不当的查询条件或不遵循最左前缀原则。因此，合理使用索引可以优化数据库的性能，但过度依赖索引可能带来负面影响。</p>\\n</blockquote>","autoDesc":true}`);export{u as comp,L as data};
