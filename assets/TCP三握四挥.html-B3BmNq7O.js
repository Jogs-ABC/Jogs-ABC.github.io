import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as r,d as t,a as o,o as l}from"./app-BI3Vj0eY.js";const a={},s=t("blockquote",null,[t("p",null,"来自 gpt 的摘要： 这篇文章解释了TCP协议中的三次握手和四次挥手，分别用于建立和断开可靠连接。三次握手确保客户端和服务端的收发能力正常，并通过同步序列号避免旧连接干扰。两次握手不足以防止历史连接的误触发，而四次握手则显得冗余。四次挥手则体现了TCP的全双工特性，允许双方独立决定何时结束数据传输，从而确保断开过程的完整性和安全性。")],-1),p=o('<h2 id="tcp-三次握手、四次挥手是什么" tabindex="-1"><a class="header-anchor" href="#tcp-三次握手、四次挥手是什么"><span>TCP 三次握手、四次挥手是什么？</span></a></h2><h3 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手"><span>三次握手</span></a></h3><p>建立一个 TCP 连接需要“三次握手”，缺一不可：</p><ul><li><p><strong>一次握手</strong>：客户端发送带有 SYN（SEQ = x）标志的数据包 -&gt; 服务端，然后客户端进入 <strong>SYN_SEND</strong> 状态，等待服务端的确认；</p></li><li><p><strong>二次握手</strong>：服务端发送带有 SYN + ACK（SEQ = y，ACK = x + 1） 标志的数据包 –&gt; 客户端,然后服务端进入 <strong>SYN_RECV</strong> 状态；</p></li><li><p><strong>三次握手</strong>：客户端发送带有 ACK（ACK = y + 1） 标志的数据包 –&gt; 服务端，然后客户端和服务端都进入<strong>ESTABLISHED</strong> 状态，完成 TCP 三次握手。</p></li></ul><p>当建立了 3 次握手之后，客户端和服务端就可以传输数据了。</p><h3 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手"><span>四次挥手</span></a></h3><p>断开一个 TCP 连接则需要“四次挥手”，缺一不可：</p><ol><li><p><strong>第一次挥手</strong>：客户端发送一个 FIN（SEQ = x） 标志的数据包-&gt;服务端，用来关闭客户端到服务端的数据传送。然后客户端进入 <strong>FIN-WAIT-1</strong> 状态。</p></li><li><p><strong>第二次挥手</strong>：服务端收到这个 FIN（SEQ = X） 标志的数据包，它发送一个 ACK （ACK = x + 1）标志的数据包-&gt;客户端。然后服务端进入 <strong>CLOSE-WAIT</strong> 状态，客户端进入 <strong>FIN-WAIT-2</strong> 状态。</p></li><li><p><strong>第三次挥手</strong>：服务端发送一个 FIN（SEQ = y）标志的数据包-&gt;客户端，请求关闭连接，然后服务端进入 <strong>LAST-ACK</strong> 状态。</p></li><li><p><strong>第四次挥手</strong>：客户端发送 ACK （ACK = y + 1）标志的数据包-&gt;服务端，然后客户端进入<strong>TIME-WAIT</strong>状态，服务端在收到 ACK（ACK = y + 1）标志的数据包后进入 CLOSE 状态。此时如果客户端等待 <strong>2MSL</strong> 后依然没有收到回复，就证明服务端已正常关闭，随后客户端也可以关闭连接了。</p></li></ol><p>只要四次挥手没有结束，客户端和服务端就可以继续传输数据。</p><h2 id="为什么要三次握手-可以设计成两次或四次吗" tabindex="-1"><a class="header-anchor" href="#为什么要三次握手-可以设计成两次或四次吗"><span>为什么要三次握手，可以设计成两次或四次吗？</span></a></h2><h3 id="为什么三次握手" tabindex="-1"><a class="header-anchor" href="#为什么三次握手"><span>为什么三次握手？</span></a></h3><p>三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。</p><ol><li><p><strong>第一次握手</strong>：Client 什么都不能确认；Server 确认了对方发送正常，自己接收正常</p></li><li><p><strong>第二次握手</strong>：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：对方发送正常，自己接收正常</p></li><li><p><strong>第三次握手</strong>：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送、接收正常</p></li></ol><p>三次握手就能确认双方收发功能都正常，缺一不可。</p><h3 id="可以两次或四次吗" tabindex="-1"><a class="header-anchor" href="#可以两次或四次吗"><span>可以两次或四次吗？</span></a></h3><p>TCP 建立连接时，通过三次握手<strong>能防止历史连接的建立，能减少双方不必要的资源开销，能帮助双方同步初始化序列号</strong>。序列号能够保证数据包不重复、不丢弃和按序传输。</p><p>不使用「两次握手」和「四次握手」的原因：</p><ul><li><p>「两次握手」：无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列号；</p></li><li><p>「四次握手」：三次握手就已经理论上最少可靠连接建立，所以不需要使用更多的通信次数。</p></li></ul><h2 id="为什么要四次挥手" tabindex="-1"><a class="header-anchor" href="#为什么要四次挥手"><span>为什么要四次挥手?</span></a></h2><h3 id="为什么四次挥手" tabindex="-1"><a class="header-anchor" href="#为什么四次挥手"><span>为什么四次挥手？</span></a></h3><p>TCP 是全双工通信，可以双向传输数据。任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了 TCP 连接。</p><p>举个例子：A 和 B 打电话，通话即将结束后。</p><ol><li><p><strong>第一次挥手</strong>：A 说“我没啥要说的了”</p></li><li><p><strong>第二次挥手</strong>：B 回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话</p></li><li><p><strong>第三次挥手</strong>：于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”</p></li><li><p><strong>第四次挥手</strong>：A 回答“知道了”，这样通话才算结束。</p></li></ol><h2 id="详细参考" tabindex="-1"><a class="header-anchor" href="#详细参考"><span>详细参考</span></a></h2><p><a href="https://xiaolincoding.com/network/3_tcp/tcp_interview.html#tcp-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84" target="_blank" rel="noopener noreferrer">TCP 三次握手与四次挥手面试题</a></p><p><a href="https://xiaolincoding.com/network/3_tcp/tcp_three_fin.html#tcp-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B" target="_blank" rel="noopener noreferrer">TCP 四次挥手，可以变成三次吗？</a></p><p><a href="https://javaguide.cn/cs-basics/network/tcp-connection-and-disconnection.html#%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5-tcp-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B" target="_blank" rel="noopener noreferrer">TCP 三次握手和四次挥手</a></p>',27);function i(g,c){return l(),n("div",null,[s,r("more"),p])}const C=e(a,[["render",i],["__file","TCP三握四挥.html.vue"]]),E=JSON.parse(`{"path":"/%E6%96%87%E7%AB%A0/%E6%8A%80%E6%9C%AF/TCP%E4%B8%89%E6%8F%A1%E5%9B%9B%E6%8C%A5.html","title":"「TCP三握四挥」","lang":"zh-CN","frontmatter":{"title":"「TCP三握四挥」","author":"Jogs","date":"2024-10-13T00:00:00.000Z","category":["技术"],"tag":["计算机网络"],"editLink":false,"description":"来自 gpt 的摘要： 这篇文章解释了TCP协议中的三次握手和四次挥手，分别用于建立和断开可靠连接。三次握手确保客户端和服务端的收发能力正常，并通过同步序列号避免旧连接干扰。两次握手不足以防止历史连接的误触发，而四次握手则显得冗余。四次挥手则体现了TCP的全双工特性，允许双方独立决定何时结束数据传输，从而确保断开过程的完整性和安全性。 TCP 三次握手...","head":[["meta",{"property":"og:url","content":"https://jogs-abc.github.io/%E6%96%87%E7%AB%A0/%E6%8A%80%E6%9C%AF/TCP%E4%B8%89%E6%8F%A1%E5%9B%9B%E6%8C%A5.html"}],["meta",{"property":"og:site_name","content":"Jogs' blog"}],["meta",{"property":"og:title","content":"「TCP三握四挥」"}],["meta",{"property":"og:description","content":"来自 gpt 的摘要： 这篇文章解释了TCP协议中的三次握手和四次挥手，分别用于建立和断开可靠连接。三次握手确保客户端和服务端的收发能力正常，并通过同步序列号避免旧连接干扰。两次握手不足以防止历史连接的误触发，而四次握手则显得冗余。四次挥手则体现了TCP的全双工特性，允许双方独立决定何时结束数据传输，从而确保断开过程的完整性和安全性。 TCP 三次握手..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Jogs"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:published_time","content":"2024-10-13T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"「TCP三握四挥」\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-13T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jogs\\"}]}"]]},"headers":[{"level":2,"title":"TCP 三次握手、四次挥手是什么？","slug":"tcp-三次握手、四次挥手是什么","link":"#tcp-三次握手、四次挥手是什么","children":[{"level":3,"title":"三次握手","slug":"三次握手","link":"#三次握手","children":[]},{"level":3,"title":"四次挥手","slug":"四次挥手","link":"#四次挥手","children":[]}]},{"level":2,"title":"为什么要三次握手，可以设计成两次或四次吗？","slug":"为什么要三次握手-可以设计成两次或四次吗","link":"#为什么要三次握手-可以设计成两次或四次吗","children":[{"level":3,"title":"为什么三次握手？","slug":"为什么三次握手","link":"#为什么三次握手","children":[]},{"level":3,"title":"可以两次或四次吗？","slug":"可以两次或四次吗","link":"#可以两次或四次吗","children":[]}]},{"level":2,"title":"为什么要四次挥手?","slug":"为什么要四次挥手","link":"#为什么要四次挥手","children":[{"level":3,"title":"为什么四次挥手？","slug":"为什么四次挥手","link":"#为什么四次挥手","children":[]}]},{"level":2,"title":"详细参考","slug":"详细参考","link":"#详细参考","children":[]}],"git":{},"readingTime":{"minutes":4.67,"words":1402},"filePathRelative":"文章/技术/TCP三握四挥.md","localizedDate":"2024年10月13日","excerpt":"<blockquote>\\n<p>来自 gpt 的摘要：\\n这篇文章解释了TCP协议中的三次握手和四次挥手，分别用于建立和断开可靠连接。三次握手确保客户端和服务端的收发能力正常，并通过同步序列号避免旧连接干扰。两次握手不足以防止历史连接的误触发，而四次握手则显得冗余。四次挥手则体现了TCP的全双工特性，允许双方独立决定何时结束数据传输，从而确保断开过程的完整性和安全性。</p>\\n</blockquote>\\n<!--more-->\\n<h2>TCP 三次握手、四次挥手是什么？</h2>\\n<h3>三次握手</h3>\\n<p>建立一个 TCP 连接需要“三次握手”，缺一不可：</p>\\n<ul>\\n<li>\\n<p><strong>一次握手</strong>：客户端发送带有 SYN（SEQ = x）标志的数据包 -&gt; 服务端，然后客户端进入 <strong>SYN_SEND</strong> 状态，等待服务端的确认；</p>\\n</li>\\n<li>\\n<p><strong>二次握手</strong>：服务端发送带有 SYN + ACK（SEQ = y，ACK = x + 1） 标志的数据包 –&gt; 客户端,然后服务端进入 <strong>SYN_RECV</strong> 状态；</p>\\n</li>\\n<li>\\n<p><strong>三次握手</strong>：客户端发送带有 ACK（ACK = y + 1） 标志的数据包 –&gt; 服务端，然后客户端和服务端都进入<strong>ESTABLISHED</strong> 状态，完成 TCP 三次握手。</p>\\n</li>\\n</ul>","autoDesc":true}`);export{C as comp,E as data};
